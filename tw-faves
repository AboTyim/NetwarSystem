#!/usr/bin/python
#DESC: Save screen name, ID, some other stats for a screen name.
import tweepy
import os, sys, json, time
import configparser
from elasticsearch import Elasticsearch
import squish2, requests
requests.packages.urllib3.disable_warnings()

config = configparser.ConfigParser()
config.read(os.environ['HOME'] +'/.twitter')


auth = tweepy.OAuthHandler(config['API']['consumer_key'], config['API']['consumer_secret'])
auth.set_access_token(config['API']['access_token_key'], config['API']['access_token_secret'])
api = tweepy.API(auth)

if True:
	try:
		print("trying")
		for page in tweepy.Cursor(api.favorites, screen_name=sys.argv[1]).pages():
			for derp in page:
				#print(derp.id_str)
				#print(derp.text)
				print(derp._json)
				print("\n\n\n\n\n")
			zod = api.rate_limit_status()
			while(zod['resources']['favorites']['/favorites/list']['remaining'] < 1):
				time.sleep(60)
				zod = api.rate_limit_status()
	except (RuntimeError, TypeError, NameError):
		pass


# author',
# 'contributors',
# 'coordinates',
# 'created_at',
# 'destroy',
# 'entities',
# 'extended_entities',
# 'favorite',
# 'favorite_count',
# 'favorited',
# 'geo',
# 'id',
# 'id_str',
# 'in_reply_to_screen_name',
# 'in_reply_to_status_id',
# 'in_reply_to_status_id_str',
# 'in_reply_to_user_id',
# 'in_reply_to_user_id_str',
# 'is_quote_status',
# 'lang',
# 'parse',
# 'parse_list',
# 'place',
# 'possibly_sensitive',
# 'retweet',
# 'retweet_count',
# 'retweeted',
# 'retweets',
# 'source',
# 'source_url',
# 'text',
# 'truncated',
# 'user']
