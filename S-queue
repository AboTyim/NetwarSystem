#!/usr/bin/python
import csv, json, os, random, re, sys, time, redis, tweepy, getpass
from simpleconfigparser import simpleconfigparser
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
from walrus import *

def load_lists(myname):
	lists = api.lists_all(myname)
	if(len(work) == 0 ):
		seen.clear()
	for list in lists:
		if re.match("r-", list.slug):
			for member in tweepy.Cursor(api.list_members,myname,list.slug).items():
				if(member.screen_name not in seen):
					print("adding " + list.slug + " " +  member.screen_name)
					seen.add(member.screen_name)
					adds.add(member.screen_name)

def get_all_tweets(acct_name):
	s = Search(using=client, index="tu*").query("match", screen_name=acct_name)
	response = s.execute()
	if(response):
		maxtweet = response[0].status.id
	else:
		maxtweet = 9999999999999999999
	print("max: " + str(maxtweet) + "\n")
	bod = ""
	cnt1 = 0
	cnt2 = 0
	for tweet in tweepy.Cursor(api.user_timeline, id=acct_name).items():
		cnt1 = cnt1 + 1
		cnt2 = cnt2 + 1
		print("adding " + acct_name + " " + str(tweet.id) + " " + " " + str(cnt2))
		bod = bod + "{ \"index\" : { \"_index\" : \"tw" + getpass.getuser() + "\", \"_type\" : \"tweets\", \"_id\" : \"" + str(tweet.id) + "\"} }\n"
		bod = bod + json.dumps(tweet._json) + "\n"
		if(cnt1 == 200):
			try:
				client.bulk(index="tw" + getpass.getuser(),doc_type="tweets",body=bod)
				bod = ""
				cnt1 = 0
			except (RuntimeError, TypeError, NameError):
				pass
	# leftovers
	if(len(bod) > 0):
		try:
			client.bulk(index="tw" + getpass.getuser(),doc_type="tweets",body=bod)
		except (RuntimeError, TypeError, NameError):
			pass

# main begin
config = simpleconfigparser()
config.read(os.environ['HOME'] +'/.twitter')

auth = tweepy.OAuthHandler(config[API][consumer_key], config[API][consumer_secret])
auth.set_access_token(config[API][access_token_key], config[API][access_token_secret])
api = tweepy.API(auth)
my = api.verify_credentials()


#class elasticsearch.connection.RequestsHttpConnection(host='localhost', 
#port=9200, http_auth=None, use_ssl=False, verify_certs=True, ca_certs=None, 
#client_cert=None, client_key=None, headers=None, **kwargs)

client = Elasticsearch(use_ssl=True, verify_certs=False, http_auth="admin:admin")

wal = Walrus(host='localhost', port=6379, db=0)
adds = wal.Set(getpass.getuser() + "adds")
work = wal.Set(getpass.getuser() + "work")
seen = wal.Set(getpass.getuser() + "seen")


load_lists(my.screen_name)

if(len(adds) > 0):
	nextid = adds.pop()
	work.add(nextid)
	print("adds: " + nextid)
else:
	nextid = work.pop()
	print("work: " + nextid)

get_all_tweets(nextid)

try:
        y = api.get_user(nextid)
        if y:
		twbod = "{ \"index\" : { \"_index\" : \"tu" + getpass.getuser() + "\", \"_type\" : \"twid\", \"_id\" : \"" + y.id_str + "\" }\n"
		twbod = twbod + json.dumps(y._json)
		client.bulk(index="tu" + getpass.getuser(),doc_type="twid",body=twbod)
except (RuntimeError, TypeError, NameError):
	print("tu failed")
        pass
