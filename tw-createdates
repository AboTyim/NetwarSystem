#!/usr/bin/python
import csv, json, os, random, re, sys, time, redis, tweepy, getpass
import configparser
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
import ssl
from elasticsearch.connection import create_ssl_context
import squish2, requests

#urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()

config = configparser.ConfigParser()
config.read(os.environ['HOME'] +'/.twitter')

if(config['STREAM']['elksg'][:5] == "https"):
	try:
		ssl_context = create_ssl_context(cafile='/home/root-ca.pem')
		ssl_context.check_hostname = False
		ssl_context.verify_mode = ssl.CERT_NONE
		client = Elasticsearch(config['STREAM']['elksg'], ssl_context=ssl_context, timeout=60, http_auth=(config['STREAM']['elksguser'], config['STREAM']['elksgpass']))
	except:
		sys.exit()
else:
	client = Elasticsearch(config['STREAM']['elksg'])

f = open(sys.argv[1],'r')
o = open(sys.argv[1] + "-open.txt", 'w')
p = open(sys.argv[1] + "-locked.txt", 'w')
for line in f:
	s = Search(using=client, index="usertest").query("match",id_str=line.rstrip())
	response = s.execute()
	if(response):
		for resp in response:
			if(not resp['protected']):
				print(resp['screen_name'] + " " + resp['id_str'] + " " + resp['status_at'])
				o.write(resp['screen_name'] + " " + resp['id_str'] + " " + resp['status_at'] + "\n")
			if(resp['protected']):
				print(resp['screen_name'] + " " + resp['id_str'] + " " + resp['status_at'])
				p.write(resp['screen_name'] + " " + resp['id_str'] + " " + resp['status_at'] + "\n")
f.close()
o.close()
p.close()
