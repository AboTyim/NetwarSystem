#!/usr/bin/python
import csv, json, os, random, re, sys, time, redis, tweepy, getpass, platform
from simpleconfigparser import simpleconfigparser
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
from walrus import *

def elog(scname,mesg):
        mydate = str(datetime.datetime.utcnow())
        ebod = "{ \"index\" : { \"_index\" : \"perflog\", \"_type\" : \"perfdata\"} }\n"
        ebod = ebod + "{\"host\" : \"" + platform.node() + "\", \"shell\" : \"" + getpass.getuser() + "\", \"screen_name\" : \"" 
        ebod = ebod + scname + "\", \"event\" : \"" + mesg + "\" , \"date\" : \"" + mydate + "\"}\n"
        #print(ebod)
        try:
                client.bulk(body=ebod)
        except(RuntimeError, TypeError, NameError):
                pass

def load_lists(myname):
	lists = api.lists_all(myname)
	if(len(work) == 0 ):
		seen.clear()
		print("now work, seen cleared")
	for list in lists:
		print("SLUG " + list.slug)
		if re.match("trm-", list.slug):
			for member in tweepy.Cursor(api.list_members,myname,list.slug).items():
				if(member.screen_name not in seen):
					print("adding " + list.slug + " " +  member.screen_name)
					seen.add(member.screen_name)
					adds.add(member.screen_name)
					print("LIST " + member.screen_name + " " + list.slug[4:])
					tlist.update(screen_name=member.screen_name, list=list.slug[4:])

def get_all_tweets(screen_name):
	if client.indices.exists(index="tu" + getpass.getuser()):
		s = Search(using=client, index="tu" + getpass.getuser()).query("match", screen_name=screen_name)
		response = s.execute()
	else:
		response = False
	if(response):
		maxtweet = response[0].status.id
		print(maxtweet)
		new_tweets = api.user_timeline(screen_name = screen_name,count=20)
	else:
		maxtweet = 9999999999999999999
		new_tweets = api.user_timeline(screen_name = screen_name,count=200)
	print("max: " + str(maxtweet) + "\n")
	oldest = maxtweet
	time.sleep(1)
	cnt=0
	seen = 0
	while(len(new_tweets) > 0 and seen == 0):
		bod = ""
		for tweet in new_tweets:		
			if(tweet.id == maxtweet):
				print("seen: " + str(tweet.id))
				seen = 1
			cnt = cnt + 1
			#print(screen_name + " " + str(tweet.id) + " " + str(maxtweet) + " " + str(cnt))
			bod = bod + "{ \"index\" : { \"_index\" : \"tw" + getpass.getuser() + "\", \"_type\" : \"tweets\", \"_id\" : \"" + str(tweet.id) + "\"} }\n"
			data = tweet._json
			data['list'] = tlist[screen_name]
			#print("data list thing")
			#print(data['list'])
			bod = bod + json.dumps(data) + "\n"
			try:
				client.bulk(index="tw" + getpass.getuser(),doc_type="tweets",body=bod)
				#print(screen_name + " " + str(tweet.id) + " " + str(cnt))
			except (RuntimeError, TypeError, NameError):
				pass
			oldest = tweet.id
		new_tweets = api.user_timeline(screen_name = screen_name,count=200, max_id=oldest)
		# will count to infinity on final tweet w/o this
		if(len(new_tweets) > 0):
			print("LEN NEW TWEETS REACHED")
			if(oldest == new_tweets[-1].id):
				new_tweets = []
	print(screen_name + " " + str(oldest) + " " + str(cnt))

# get_all_tweets

# main begin
config = simpleconfigparser()
config.read(os.environ['HOME'] +'/.twitter')

auth = tweepy.OAuthHandler(config[API][consumer_key], config[API][consumer_secret])
auth.set_access_token(config[API][access_token_key], config[API][access_token_secret])
api = tweepy.API(auth)
my = api.verify_credentials()

client = Elasticsearch(use_ssl=True, verify_certs=False, http_auth="admin:admin")


wal = Walrus(host='localhost', port=6379, db=0)
adds = wal.Set(getpass.getuser() + "adds")
work = wal.Set(getpass.getuser() + "work")
seen = wal.Set(getpass.getuser() + "seen")
tlist = wal.Hash(getpass.getuser() + "tlist")
#tlist.update(name='Charlie', favorite_cat='Huey')

load_lists(my.screen_name)

if(len(adds) > 0):
	nextid = adds.pop()
	work.add(nextid)
	print("adds: " + nextid)
else:
	nextid = work.pop()
	print("work: " + nextid)

elog(nextid," Qstart")
get_all_tweets(nextid)

try:
        y = api.get_user(nextid)
        if y:
                twbod = "{ \"index\" : { \"_index\" : \"tu" + getpass.getuser() + "\", \"_type\" : \"twid\", \"_id\" : \"" + y.id_str + "\" }\n"
                twbod = twbod + json.dumps(y._json)
                client.bulk(index="tu" + getpass.getuser(),doc_type="twid",body=twbod)
except (RuntimeError, TypeError, NameError):
	print("tu failed")
        pass
