#!/usr/bin/python
#DESC: drain Redis queue of numeric IDs to usertest index
import tweepy
import os, sys, json, time
import configparser, getpass, platform
from elasticsearch import Elasticsearch
from walrus import *
import ssl
from elasticsearch.connection import create_ssl_context
import squish

def elog(scname,mesg):
        mydate = str(datetime.datetime.utcnow())
        ebod = "{ \"index\" : { \"_index\" : \"perflog\", \"_type\" : \"perfdata\"} }\n"
        ebod = ebod + "{\"host\" : \"" + platform.node() + "\", \"shell\" : \"" + getpass.getuser() + "\", \"screen_name\" : \"" 
        ebod = ebod + str(scname) + "\", \"event\" : \"" + str(mesg) + "\" , \"date\" : \"" + mydate + "\"}\n"
        #print(ebod)
        try:
                client.bulk(body=ebod)
        except(RuntimeError, TypeError, NameError):
                pass


config = configparser.ConfigParser()
config.read(os.environ['HOME'] +'/.twitter')

auth = tweepy.OAuthHandler(config['API']['consumer_key'], config['API']['consumer_secret'])
auth.set_access_token(config['API']['access_token_key'], config['API']['access_token_secret'])
api = tweepy.API(auth)

ssl_context = create_ssl_context(cafile='/home/root-ca.pem')
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE
client = Elasticsearch('https://hp0.netwarsystem.com:9200', ssl_context=ssl_context, timeout=60, http_auth=("admin", "LongPassword2019"))

client.indices.create(index='usertest', ignore=400)
wal = Walrus(host='localhost', port=6379, db=0)
tum = wal.Set("usertest")


twbod = ""
cnt = 0
cnt2 = 0
while(cnt2 < 800):
	try:
		y = api.get_user(tum.pop().decode('utf-8'))
		if y:
			id = y._json.pop('id', None)
			y = squish.squishuser(y)
			print(y.screen_name)
			twbod = twbod + "{ \"index\" : { \"_index\" : \"usertest\", \"_type\" : \"userid\", \"_id\" : \"" + y.id_str + "\" }\n"
			twbod = twbod + json.dumps(y._json) + "\n"
			cnt = cnt + 1
	except (RuntimeError, TypeError, NameError, tweepy.error.TweepError):
		pass
	except(AttributeError):
		cnt = 800
	if(cnt > 99):
		#zork = open('twbod.txt', 'w')
		#for line in twbod:
		#	zork.write(line)
		#zork.close()
		print("cnt > 99")
		client.bulk(index="usertest",doc_type="userid",body=twbod)
		cnt2 = cnt2 + cnt
		twbod = ""
		cnt = 0
		elog(getpass.getuser(),"test profiling " + str(cnt2))
		zod = api.rate_limit_status()
		if(zod['resources']['users']['/users/show/:id']['remaining'] < 100):
			cnt2 = 800
