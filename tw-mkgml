#!/usr/bin/python
import csv, json, os, random, re, sys, time, redis, tweepy, getpass, re, math
import configparser
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
import ssl, requests
from elasticsearch.connection import create_ssl_context
import networkx as nx
from walrus import *
from scipy.stats.mstats import gmean

#urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()


config = configparser.ConfigParser()
config.read(os.environ['HOME'] +'/.twitter')
sysconf = configparser.ConfigParser()
sysconf.read('/etc/netwar/netwar.conf')


if(sysconf['SYSTEM']['elksg'][:5] == "https"):
	try:
		ssl_context = create_ssl_context(cafile='/home/root-ca.pem')
		ssl_context.check_hostname = False
		ssl_context.verify_mode = ssl.CERT_NONE
		client = Elasticsearch(sysconf['SYSTEM']['elksg'], ssl_context=ssl_context, timeout=60, http_auth=(sysconf['SYSTEM']['elksguser'], sysconf['SYSTEM']['elksgpass']))
	except:
		sys.exit()
else:
	client = Elasticsearch(sysconf['SYSTEM']['elksg'])

########################################################################################
bis = open("/home/nlp/bigrams.nlp", 'r')
bimax = 116997844
bigrams = {}

for line in bis:
	(two, num) = re.split(" ", line.rstrip())
	factor = int(num)/bimax
	if factor < 0.0001:
		factor = 0
	bigrams[two.upper()] = factor
bis.close()

tris = open("/home/nlp/trigrams.nlp", 'r')
trimax = 77534223
trigrams = {}

for line in tris:
	(three, num) = re.split(" ", line.rstrip())
	#make trigrams worth 2x more than bigrams
	factor = int(num)/(trimax/2)
	if factor < 0.0001:
		factor = 0
	trigrams[three.upper()] = factor
tris.close()

quads = open("/home/nlp/quads.nlp", 'r')
quadmax = 13168375
quadgrams = {}

for line in quads:
	(four, num) = re.split(" ", line.rstrip())
	#make quads worth 4x more than bigrams
	factor = int(num)/(quadmax/4)
	if factor < 0.0001:
		factor = 0
	quadgrams[four.upper()] = factor
quads.close()

arabnames = open("/home/nlp/arab5.nlp", 'r')
arabs = {}

for line in arabnames:
	name = line[:5].upper()
	arabs[name] = 2
arabnames.close()

englishnames = open("/home/nlp/english5.nlp", 'r')
english = {}

for line in englishnames:
	name = line[:5].upper()
	english[name] = 2
englishnames.close()
########################################################################################

names = open(sys.argv[2],'r')
DG = nx.DiGraph()

wal = Walrus(host=sysconf['SYSTEM']['redishost'],port=sysconf['SYSTEM']['redisport'], db=0)
seeds = wal.Set("seeds")
seeds.clear()

for file in names:
	fname = re.sub(".txt", "",file.rstrip())
	seeds.add(fname)
	s = Search(using=client, index=sys.argv[1]).query("match",screen_name=fname)
	response = s.execute()
	if(response):
		for resp in response:
				DG.add_node(fname, faves = resp['favourites_count'], 
							followers = resp['followers_count'],
							friends   = resp['friends_count'], 
							listed    = resp['listed_count'], 
							statuses  = resp['statuses_count'],
							gmean4=int(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['statuses_count']])),
							gmean5=int(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['listed_count'], resp['statuses_count']])),
							ln1p4=math.log1p(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['statuses_count']])),
							ln1p5=math.log1p(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['listed_count'], resp['statuses_count']])))
	accts = open(fname + ".txt", 'r')
	for line in accts:
		s = Search(using=client, index="usertest").query("match",id_str=line.rstrip())
		response = s.execute()
		if(response):
			for resp in response:
				print(resp['screen_name'] + "," + fname)
				sn = resp['screen_name']
				sum = 0

				#a trailing '1' following otherwise alpha chars is often a human
				if re.match("[a-zA-Z]{14}1", sn):
					sum = sum + 1

				for idx1 in range(0,14):
					try:
						sum = sum + bigrams[sn[idx1:idx1+2].upper()]
					except:
						pass

				for idx2 in range(0,13):
					try:
						sum = sum + trigrams[sn[idx2:idx2+3].upper()]
					except:
						pass

				for idx3 in range(0,12):
					try:
						sum = sum + quadgrams[sn[idx3:idx3+4].upper()]
					except:
						pass

				for idx4 in range(0,11):
					try:
						sum = sum + arabs[sn[idx4:idx4+5].upper()]
						sum = sum + english[sn[idx4:idx4+5].upper()]
					except:
						pass

				DG.add_node(sn, faves = resp['favourites_count'], 
					followers     = resp['followers_count'],
					friends       = resp['friends_count'], 
					listed	      = resp['listed_count'], 
					statuses      = resp['statuses_count'],
					namequal      = sum,
					gmean4=int(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['statuses_count']])),
					gmean5=int(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['listed_count'], resp['statuses_count']])),
					ln1p4=math.log1p(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['statuses_count']])),
					ln1p5=math.log1p(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['listed_count'], resp['statuses_count']])),
					seed	  = int(2 ** math.log1p(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['listed_count'], resp['statuses_count']]))),
					iseed	 = 16384 - int(2 ** math.log1p(gmean([resp['favourites_count'],resp['followers_count'],resp['friends_count'], resp['listed_count'], resp['statuses_count']]))))
				DG.add_edge(sn, fname, weight=1)

for seed in seeds:
	DG.add_node(seed.decode('utf-8'), seed=16384, iseed=16384, namequal=20.0)

nx.write_gml(DG,"fo" + sys.argv[2] + "-full.gml")

remove = [node for node,degree in DG.degree().items() if degree < 2]
DG.remove_nodes_from(remove)

nx.write_gml(DG,"fo" + sys.argv[2] + ".gml")

