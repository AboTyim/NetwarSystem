#!/usr/bin/python
#DESC: Save screen name, ID, some other stats for a screen name.
import tweepy
import os, sys, json, time
import configparser
from walrus import *
import squish2, requests

#urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()

config = configparser.ConfigParser()
if len(sys.argv) == 3:
	cfile = sys.argv[2]
else:
	cfile = os.environ['HOME'] +'/.twitter'
config.read(cfile)

wal = Walrus(host=config['SYSTEM']['redishost'],port=config['SYSTEM']['redisport'], db=0)
tum = wal.Set("friends")
if(len(tum)>0):
	
	auth = tweepy.OAuthHandler(config['API']['consumer_key'], config['API']['consumer_secret'])
	auth.set_access_token(config['API']['access_token_key'], config['API']['access_token_secret'])
	api = tweepy.API(auth)

	#need rate limit check here
	zod = api.rate_limit_status()
	if(zod['resources']['friends']['/friends/ids']['remaining'] < 2):
		print("not enough API")
		sys.exit()

	if True:
		try:
			acct = tum.pop().decode('utf-8')
			out = open("/home/friends/" + acct + ".txt", 'w')
			for page in tweepy.Cursor(api.friends_ids, screen_name=acct).pages():
				for derp in page:
					print(derp)
					out.write(str(derp) + "\n")
				zod = api.rate_limit_status()
				while(zod['resources']['friends']['/friends/ids']['remaining'] < 2):
					time.sleep(60)
					zod = api.rate_limit_status()
		except (RuntimeError, TypeError, NameError):
			pass
	out.close()
