#!/usr/bin/python
import csv, json, os, random, re, sys, time, redis, tweepy, getpass
from simpleconfigparser import simpleconfigparser
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
from walrus import *

def load_lists(myname):
	lists = api.lists_all(myname)
	if(len(work) == 0 ):
		seen.clear()
	for list in lists:
		if re.match("trm-", list.slug):
			for member in tweepy.Cursor(api.list_members,myname,list.slug).items():
				if(member.screen_name not in seen):
					print("adding " + list.slug + " " +  member.screen_name)
					seen.add(member.screen_name)
					adds.add(member.screen_name)

# main begin
config = simpleconfigparser()
config.read(os.environ['HOME'] +'/.twitter')

auth = tweepy.OAuthHandler(config.API.consumer_key, config.API.consumer_secret)
auth.set_access_token(config.API.access_token_key, config.API.access_token_secret)
api = tweepy.API(auth)
my = api.verify_credentials()

client = Elasticsearch(use_ssl=True, verify_certs=False, http_auth="admin:admin")

wal = Walrus(host='localhost', port=6379, db=0)
adds = wal.Set(getpass.getuser() + "adds")
work = wal.Set(getpass.getuser() + "work")
seen = wal.Set(getpass.getuser() + "seen")


load_lists(my.screen_name)

while ((len(work) > 0) or (len(adds) > 0)):
	print("have some work")
	if(len(adds) > 0):
		nextid = adds.pop()
		work.add(nextid)
		print("adds: " + nextid)
	else:
		nextid = work.pop()
		print("work: " + nextid)
	myind = "tu" + getpass.getuser()
	response = False
	if client.indices.exists(index=myind):
		s = Search(using=client, index=myind).query("match", screen_name=nextid)
		response = s.execute()
	if(response):
		print("already have it")
	else:
		try:
	        	y = api.get_user(nextid)
	        	if y:
				twbod = "{ \"index\" : { \"_index\" : \"tu" + getpass.getuser() + "\", \"_type\" : \"twid\", \"_id\" : \"" + y.id_str + "\" }\n"
				twbod = twbod + json.dumps(y._json)
				client.bulk(index="tu" + getpass.getuser(),doc_type="twid",body=twbod)
		except (RuntimeError, TypeError, NameError):
		        sys.exit()
