#!/usr/bin/python
import os, sys, json, time, psutil, setproctitle, datetime
import configparser, getpass, platform
from elasticsearch import Elasticsearch
import ssl, requests
from elasticsearch.connection import create_ssl_context
import squish2, requests
#urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()


def perflog(scname,mesg):
	mydate = str(datetime.datetime.utcnow())
	ebod = "{ \"index\" : { \"_index\" : \"perflog\", \"_type\" : \"perfdata\"} }\n"
	ebod = ebod + "{\"host\" : \"" + platform.node() + "\", \"shell\" : \"" + getpass.getuser() + "\", \"screen_name\" : \"" 
	ebod = ebod + str(scname) + "\", \"event\" : \"" + str(mesg) + "\" , \"date\" : \"" + mydate + "\"}\n"
	#print(ebod)
	try:
		client.bulk(body=ebod)
	except(RuntimeError, TypeError, NameError):
		pass

config = configparser.ConfigParser()
config.read(os.environ['HOME'] +'/.twitter')

if(config['STREAM']['elksg'][:5] == "https"):
	try:
		ssl_context = create_ssl_context(cafile='/home/root-ca.pem')
		ssl_context.check_hostname = False
		ssl_context.verify_mode = ssl.CERT_NONE
		client = Elasticsearch(config['STREAM']['elksg'], ssl_context=ssl_context, timeout=60, http_auth=(config['STREAM']['elksguser'], config['STREAM']['elksgpass']))
	except:
		sys.exit()
else:
	client = Elasticsearch(config['STREAM']['elksg'])

perflog("system", "some random stuff goes here")
